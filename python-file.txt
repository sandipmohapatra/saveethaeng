What is a file?
File is a named location on disk to store related information. It is used to permanently store data in a non-volatile memory (e.g. hard disk).

Since, random access memory (RAM) is volatile which loses its data when computer is turned off, we use files for future use of the data.

When we want to read from or write to a file we need to open it first. When we are done, it needs to be closed, so that resources that are tied with the file are freed.

Hence, in Python, a file operation takes place in the following order.

Open a file
Read or write (perform operation)
Close the file
------------------------------------------------------
How to open a file
Python has a built-in function open() to open a file. This function returns a file object, also called a handle, as it is used to read or modify the file accordingly.

>>> f = open("test.txt")    # open file in current directory
>>> f = open("C:/Python33/README.txt")  # specifying full path
We can specify the mode while opening a file. In mode, we specify whether we want to read 'r', write 'w' or append 'a' to the file. We also specify if we want to open the file in text mode or binary mode.

The default is reading in text mode. In this mode, we get strings when reading from the file.

On the other hand, binary mode returns bytes and this is the mode to be used when dealing with non-text files like image or exe files.

Python File Modes
Mode	Description
----------------------------------------------------------------------------------
'r'	Open a file for reading. (default)
'w'	Open a file for writing. Creates a new file if it does not exist or truncates the file if it exists.
'x'	Open a file for exclusive creation. If the file already exists, the operation fails.
'a'	Open for appending at the end of the file without truncating it. Creates a new file if it does not exist.
't'	Open in text mode. (default)
'b'	Open in binary mode.
'+'	Open a file for updating (reading and writing)

----------------------------------------------------------------------------------
f = open("test.txt")      # equivalent to 'r' or 'rt'
f = open("test.txt",'w')  # write in text mode
f = open("img.bmp",'r+b') # read and write in binary mode

------------------------------------------------
How to close a file Using Python
-------------------------------------------------
When we are done with operations to the file, we need to properly close the file.

Closing a file will free up the resources that were tied with the file and is done using Python close() method.

Python has a garbage collector to clean up unreferenced objects but, we must not rely on it to close the file.

f = open("test.txt",encoding = 'utf-8')
# perform file operations
f.close()

----------------------------------------------
How to write to File Using Python?
In order to write into a file in Python, we need to open it in write 'w', append 'a' or exclusive creation 'x' mode.

We need to be careful with the 'w' mode as it will overwrite into the file if it already exists. All previous data are erased.

Writing a string or sequence of bytes (for binary files) is done using write() method. This method returns the number of characters written to the file.

with open("test.txt",'w',encoding = 'utf-8') as f:
   f.write("my first file\n")
   f.write("This file\n\n")
   f.write("contains three lines\n")
This program will create a new file named 'test.txt' if it does not exist. If it does exist, it is overwritten.
---------------------------------------------
How to read files in Python?
To read a file in Python, we must open the file in reading mode.

There are various methods available for this purpose. We can use the read(size) method to read in size number of data. If size parameter is not specified, it reads and returns up to the end of the file.

>>> f = open("test.txt",'r',encoding = 'utf-8')
>>> f.read(4)    # read the first 4 data
'This'

>>> f.read(4)    # read the next 4 data
' is '

>>> f.read()     # read in the rest till end of file
'my first file\nThis file\ncontains three lines\n'

>>> f.read()  # further reading returns empty sting
''
We can see that, the read() method returns newline as '\n'. Once the end of file is reached, we get empty string on further reading.

We can change our current file cursor (position) using the seek() method. Similarly, the tell() method returns our current position (in number of bytes).

>>> f.tell()    # get the current file position
56

>>> f.seek(0)   # bring file cursor to initial position
0

>>> print(f.read())  # read the entire file
This is my first file
This file
contains three lines
We can read a file line-by-line using a for loop. This is both efficient and fast.

>>> for line in f:
...     print(line, end = '')
...
This is my first file
This file
contains three lines
The lines in file itself has a newline character '\n'.

Moreover, the print() end parameter to avoid two newlines when printing.

Alternately, we can use readline() method to read individual lines of a file. This method reads a file till the newline, including the newline character.

>>> f.readline()
'This is my first file\n'

>>> f.readline()
'This file\n'

>>> f.readline()
'contains three lines\n'

>>> f.readline()
''
Lastly, the readlines() method returns a list of remaining lines of the entire file. All these reading method return empty values when end of file (EOF) is reached.

>>> f.readlines()
['This is my first file\n', 'This file\n', 'contains three lines\n']
Python File Methods
There are various methods available with the file object. Some of them have been used in above examples.

--------------------------------------------
example:-1

# open the file.txt in read mode. causes error if no such file exists.
fileptr = open("test.txt", "r");

# stores all the data of the file into the variable content
content = fileptr.read(29);

# prints the type of the data stored in the file
print(type(content))

# prints the content of the file
print(content)

# closes the opened file
fileptr.close()
----------------------------------------------------------------------------------
example:-2

# open the file.txt in read mode. causes error if no such file exists.
fileptr = open("test.txt", "r");

# stores all the data of the file into the variable content
content = fileptr.readline();

# prints the type of the data stored in the file
print(type(content))

# prints the content of the file
print(content)

# closes the opened file
fileptr.close()
-----------------------------------------------------------------
example:-3

# open the file.txt in read mode. causes an error if no such file exists.


fileptr = open("test.txt", "r");

# running a for loop
for i in fileptr:
    print(i)  # i contains each line of the file
-----------------------------------------------------------------------------
example:-4
# open the file.txt in write mode.
fileptr = open("test.txt", "w");

# overwriting the content of the file
fileptr.write("Python is the modern day language. It makes things so simple.")

# closing the opened file
fileptr.close();
-----------------------------------------------------
example-5

# create the file.txt in read mode. 
fileptr = open("file2.txt", "x");

print(fileptr)

if fileptr:
    print("File created successfully");
------------------------------------------------------------
example :-6

# open the file file2.txt in read mode
fileptr = open("file2.txt", "r")

# initially the filepointer is at 0
print("The filepointer is at byte :", fileptr.tell())

# reading the content of the file
content = fileptr.read();

# after the read operation file pointer modifies. tell() returns the location of the fileptr.

print("After reading, the filepointer is at:", fileptr.tell())  
---------------------------------------------------
example:-7

# open the file file2.txt in read mode
fileptr = open("file2.txt", "r")

# initially the filepointer is at 0
print("The filepointer is at byte :", fileptr.tell())

# changing the file pointer location to 10.
fileptr.seek(10);

# tell() returns the location of the fileptr.
print("After reading, the filepointer is at:", fileptr.tell())  
-------------------------------------------------------------
example-8
temperatures=[10,-20,-289,100]
def c_to_f(c):
    if c< -273.15:
        return "That temperature doesn't make sense!"
    else:
        f=c*9/5+32
        return f
for t in temperatures:
    print(c_to_f(t))

a=int(input())
b=int(input())
def sum(a,b):
    return a+b
print('the sum is ',sum(a,b))
----------------------------------------------------------
example-9

import subprocess
print('enter 2 nos')
with open("output.txt", "wb") as x:
    subprocess.check_call(["python", "file9.py"], stdout=x)
-------------------------------------------------------------------------------
