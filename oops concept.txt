Python OOPs Concepts
-----------------------------------------
Like other general purpose languages, python is also an object-oriented language since its beginning. Python is an object-oriented programming language. It allows us to develop applications using an Object Oriented approach. In Python, we can easily create and use classes and objects.

Major principles of object-oriented programming system are :-

Object
Class
Method
constructor
Inheritance
Polymorphism
Data Abstraction
Encapsulation
----------------------------------------------------------------

Object
The object is an entity that has state and behavior. It may be any real-world object like the mouse, keyboard, chair, table, pen, etc.

Everything in Python is an object, and almost everything has attributes and methods. All functions have a built-in attribute __doc__, which returns the doc string defined in the function source code.

Class
The class can be defined as a collection of objects. It is a logical entity that has some specific attributes and methods. For example: if you have an employee class then it should contain an attribute and method, i.e. an email id, name, age, salary, etc.

Method
The method is a function that is associated with an object. In Python, a method is not unique to class instances. Any object type can have methods.

Inheritance
Inheritance is the most important aspect of object-oriented programming which simulates the real world concept of inheritance. It specifies that the child object acquires all the properties and behaviors of the parent object.

By using inheritance, we can create a class which uses all the properties and behavior of another class. The new class is known as a derived class or child class, and the one whose properties are acquired is known as a base class or parent class.

It provides re-usability of the code.

Polymorphism
Polymorphism contains two words "poly" and "morphs". Poly means many and Morphs means form, shape. By polymorphism, we understand that one task can be performed in different ways. For example You have a class animal, and all animals speak. But they speak differently. Here, the "speak" behavior is polymorphic in the sense and depends on the animal. So, the abstract "animal" concept does not actually "speak", but specific animals (like dogs and cats) have a concrete implementation of the action "speak".

Encapsulation
Encapsulation is also an important aspect of object-oriented programming. It is used to restrict access to methods and variables. In encapsulation, code and data are wrapped together within a single unit from being modified by accident.

Data Abstraction

Data abstraction and encapsulation both are often used as synonyms. Both are nearly synonym because data abstraction is achieved through encapsulation.

Abstraction is used to hide internal details and show only functionalities. Abstracting something means to give names to things so that the name captures the core of what a function or a whole program does.
------------------------------------------------------------------------------------------------
use of OOP's Concept

1)Object-oriented programming is the problem-solving approach and used where computation is done by using objects.
2)It makes the development and maintenance easier.
3)It simulates the real world entity. So real-world problems can be easily solved through oops.
4)It provides data hiding. So it is more secure than procedural languages. You cannot access private data from anywhere.
5)Example of object-oriented programming languages is C++, Java, .Net, Python, C#, etc.
-------------------------------------------------------------
Creating an instance of the class
A class needs to be instantiated if we want to use the class attributes in another class or method. A class can be instantiated by calling the class using the class name.

The syntax to create the instance of the class is given below.

<object-name> = <class-name>(<arguments>)  

example :-

class Employee:  
    id = 10  
    name = "John"
    address = "Bangalore"
    def display (x):  
        print("ID: %d \nName: %s \n Address: %s"%(x.id,x.name,x.address))  
emp = Employee()  
emp.display()  
-----------------------------------------------------

Python Constructor
A constructor is a special type of method (function) which is used to initialize the instance members of the class.

Constructors can be of two types.

Parameterized Constructor
Non-parameterized Constructor

Constructor definition is executed when we create the object of this class. Constructors also verify that there are enough resources for the object to perform any start-up task.

Creating the constructor in python
In python, the method __init__ simulates the constructor of the class. This method is called when the class is instantiated. We can pass any number of arguments at the time of creating the class object, depending upon __init__ definition. It is mostly used to initialize the class attributes. Every class must have a constructor, even if it simply relies on the default constructor.

Consider the following example to initialize the Employee class attributes.

Example
class Employee:  
    def __init__(self,name,id):  
        self.id = id;  
        self.name = name;  
    def display (self):  
        print("ID: %d \nName: %s"%(self.id,self.name))  
emp1 = Employee("John",101)  
emp2 = Employee("David",102)  
  
#accessing display() method to print employee 1 information  
   
emp1.display();   
  
#accessing display() method to print employee 2 information  
emp2.display();   
Output:

ID: 101 
Name: John
ID: 102 
Name: David
---------------------------------------------------------
Example: Counting the number of objects of a class
class Student:  
    count = 0  
    def __init__(self):  
        Student.count = Student.count + 1  
s1=Student()  
s2=Student()  
s3=Student()  
print("The number of students:",Student.count)  
Output:

The number of students: 3
------------------------------------------------------------------------------
Python Non-Parameterized Constructor Example
class Student:    
    # Constructor - non parameterized    
    def __init__(self):    
        print("This is non parametrized constructor")    
    def show(self,name):    
        print("Hello",name)    
stud = Student()    
stud.show("John")    
Output:

This is non parametrized constructor
Hello John
------------------------------------------------------------------------
Python Parameterized Constructor Example
class Student:    
    # Constructor - parameterized    
    def __init__(self, name):    
        print("This is parametrized constructor")    
        self.name = name    
    def show(self):    
        print("Hello",self.name)    
student = Student("John")    
student.show()  
Output:

This is parametrized constructor
Hello John

----------------------------------------------------------------
class Animal:
    def speak(self):
        print("Animal Speaking")
#child class Dog inherits the base class Animal
class Dog(Animal):
    def bark(self):
        print("dog barking")
d = Dog()
d.bark()
d.speak()
-------------------------------------
class student:
    id = 10;
    name = "sandip"
    address = "bangalore"

    def display(self):
        print(self.id, self.name, self.address)
class marks(student):
    phy = 70;
    chem = 60
    math = 80
    total=phy+chem+math
    avg=total/3
    def display1(self):
        print(self.phy, self.chem, self.math)
    def sum(self):
        print("the total is ",self.total)
    def average(self):
        print("the average is ",self.avg)
d = marks()
d.display()
d.display1()
d.sum()
d.average()
---------------------------------------------------------------
class student:
    id = 10;
    name = "sandip"
    address = "bangalore"

    def display(self):
        print(self.id, self.name, self.address)
class marks(student):
    phy = 70;
    chem = 60
    math = 80
    total=phy+chem+math
    avg=total/3
    def display1(self):
        print(self.phy, self.chem, self.math)
    def sum(self):
        print("the total is ",self.total)
    def average(self):
        print("the average is ",self.avg)
class grade(marks):
    def studgrade(self):
        if self.avg > 85 and self.avg <= 100:
            print("Congrats ! you scored grade A ...")
        elif self.avg > 60 and self.avg <= 85:
            print("You scored grade B + ...")
        elif self.avg > 40 and self.avg <= 60:
            print("You scored grade B ...")
        elif (self.avg > 30 and self.avg <= 40):
            print("You scored grade C ...")
        else:
            print("Sorry you are fail ?")
d = grade()
d.display()
d.display1()
d.sum()
d.average()
d.studgrade()
--------------------------------------------
class Bank:
    def getroi(self):
        return 10;


class SBI(Bank):
    def getroi(self):
        return 7;


class ICICI(Bank):
    def getroi(self):
        return 8;


b1 = Bank()
b2 = SBI()
b3 = ICICI()
print("Bank Rate of interest:", b1.getroi());
print("SBI Rate of interest:", b2.getroi());
print("ICICI Rate of interest:", b3.getroi());
----------------------------------------------------------------------
class Calculation1:
    def Summation(self,a,b):
        return a+b;
class Calculation2:
    def Multiplication(self,a,b):
        return a*b;
class Derived(Calculation1,Calculation2):
    def Divide(self,a,b):
        return a/b;
d = Derived()
print(d.Summation(10,20))
print(d.Multiplication(10,20))  
print(d.Divide(10,20))
--------------------------------------------------
class Calculation1:
    def Summation(self,a,b):
        return a+b;
class Calculation2:
    def Multiplication(self,a,b):
        return a*b;
class Derived(Calculation1,Calculation2):
    def Divide(self,a,b):
        return a/b;
d = Derived()  
print(issubclass(Derived,Calculation2))
print(issubclass(Calculation1,Calculation2))
-------------------------------------------------------------------
